import streamlit as st
from PIL import Image
from haar_matrix import HaarCompressor
import io

def main():
    st.set_page_config(page_title="Demo ·∫¢nh N√©n", layout="centered")
    st.title("üîß Chuy·ªÉn ·∫£nh th∆∞·ªùng th√†nh ·∫£nh n√©n b·∫±ng ph∆∞∆°ng ph√°p Haar")
    st.markdown("Upload ·∫£nh r·ªìi ch·ªçn m·ª©c ƒë·ªô n√©n (threshold).")

    uploaded_file = st.file_uploader("üìÅ Ch·ªçn ·∫£nh", type=["png", "jpg", "jpeg"])
    threshold = st.slider("Ch·ªçn threshold", min_value=1, max_value=500, value=100)

    if uploaded_file is not None:
        # ƒê·ªçc ·∫£nh g·ªëc
        image = Image.open(uploaded_file)
        image_format = image.format.upper()  # "PNG", "JPEG", etc.
        file_extension = image_format.lower() if image_format != "JPEG" else "jpg"
        mime_type = f"image/{file_extension}"

        # Convert PIL image to temporary path (HaarCompressor expects path)
        image_path = f"temp_input.{file_extension}"
        image.save(image_path)

        # Kh·ªüi t·∫°o v√† n√©n ·∫£nh
        haar_compressor = HaarCompressor()
        haar_compressor.compress_image_by_threshold(image_path, threshold)

        # L·∫•y ·∫£nh n√©n d∆∞·ªõi d·∫°ng PIL.Image
        compressed_pil = Image.fromarray(haar_compressor.compressed_image)

        # L∆∞u ·∫£nh n√©n v√†o buffer
        compressed_io = io.BytesIO()
        compressed_pil.save(compressed_io, format=image_format)
        compressed_io.seek(0)

        # Hi·ªÉn th·ªã ·∫£nh
        col1, col2 = st.columns(2)
        with col1:
            st.image(image, caption="·∫¢nh g·ªëc", use_container_width=True)
        with col2:
            st.image(compressed_pil, caption=f"·∫¢nh n√©n (threshold={threshold})", use_container_width=True)

        # N√∫t t·∫£i ·∫£nh n√©n
        st.download_button(
            label="üì• T·∫£i ·∫£nh n√©n",
            data=compressed_io,
            file_name=f"compressed.{file_extension}",
            mime=mime_type
        )

if __name__ == "__main__":
    main()
